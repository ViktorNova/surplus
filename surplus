#!/usr/bin/env python
'''
surplus
'''
import sys, os, subprocess
from PyQt4 import QtGui, QtCore

style_file = 'style.qss'
default_audio_dir = os.path.expanduser('~')
line_height= 25

exts = ['wav','mp3','ogg','flac','m4a']

def play(a_file):
    subprocess.Popen(['play', a_file], close_fds=True)

class listItem(QtGui.QGraphicsRectItem):
    def __init__(self, text, is_file=True):
        QtGui.QGraphicsRectItem.__init__(self, 0, 0, 280, line_height)
        self.is_file = is_file
        self.setFlag(QtGui.QGraphicsItem.ItemIsSelectable)

        clearpen = QtGui.QPen(QtGui.QColor(0,0,0,0))
        self.setPen(clearpen)
        the_text = text[:37]+'...' if len(text) > 40 else text
        the_text += '/' if not is_file else ''
        self.label = QtGui.QGraphicsSimpleTextItem(the_text, parent=self)
        self.label.setPos(10, 5)
        self.label.setBrush(QtCore.Qt.white)
        font = QtGui.QFont()#"Source Sans Pro")
        if not is_file:
            font.setPointSize(8)
            font.setBold(True)
        self.label.setFont(font)

    def paint(self, painter, option, widget=None):
        paint_option = option
        paint_option.state &= ~QtGui.QStyle.State_Selected
        QtGui.QGraphicsRectItem.paint(self,painter,paint_option,widget)

    def playSample(self):
        play(self.label.text())

    def setSelected(self, selected):
        QtGui.QGraphicsRectItem.setSelected(self, selected)
        if selected:
            self.scene().views()[0].ensureVisible(self, xMargin=-50)
            self.setBrush(QtGui.QColor(50,102,150))

            if self.is_file:
                self.playSample()
        else:
            self.setBrush(QtGui.QColor(50,50,50))

    def mousePressEvent(self, event):
        #QtGui.QPushButton.mousePressEvent(self, event)
        if not self.isSelected():
            for item in self.scene().selectedItems():
                item.setSelected(False)
            self.setSelected(True)
        else:
            self.playSample()
    
    def mouseMoveEvent(self, event):
        if self.is_file:
            mimeData = QtCore.QMimeData()
            path = os.path.abspath(str(self.label.text()))
            mimeData.setUrls([QtCore.QUrl.fromLocalFile(os.path.abspath(str(self.label.text())))])

            #view = self.scene().views()[0]
            #sceneP = self.mapToScene(self.boundingRect().bottomRight())
            #viewP = view.mapFromScene(sceneP)
            #wpos = view.viewport().mapToGlobal(viewP)

            #wpos = self.pos().toPoint()
            #wrect = self.boundingRect().toRect()
            #wrect.moveBottomLeft(wpos)
            #pixmap = QtGui.QPixmap.grabWidget(event.widget(), wrect)

            #painter = QtGui.QPainter(pixmap)
            #painter.setCompositionMode(painter.CompositionMode_DestinationIn)
            #painter.fillRect(pixmap.rect(), QtGui.QColor(0,0,0,127))
            #painter.end()

            drag = QtGui.QDrag(event.widget())
            drag.setMimeData(mimeData)
            #drag.setPixmap(pixmap)
            #drag.setHotSpot(event.widget().pos())
            drag.exec_(QtCore.Qt.CopyAction)


    def mouseReleaseEvent(self, event):
        if not self.is_file:
            self.scene().changeDir(self.label.text())

class fileList(QtGui.QGraphicsScene):
    path_updated = QtCore.pyqtSignal(str)

    def __init__(self, path, parent=None):
        QtGui.QGraphicsScene.__init__(self, parent)
        self.parent = parent
        self.setBackgroundBrush(QtGui.QColor(50, 50, 50))

        self.items = []
        self.prev_dir = None
        self.changeDir(path)
    
    #def event(self, event):
    #    if event.type()==QtCore.QEvent.KeyPress and event.key() == QtCore.Qt.Key_Tab:
    #        self.tab_pressed.emit()
    #        return True
    #    return QtGui.QGraphicsScene.event(self, event)

    def keyPressEvent(self, event):
        QtGui.QGraphicsScene.keyPressEvent(self, event)
        if type(event) == QtGui.QKeyEvent:

            if event.key() == QtCore.Qt.Key_Up: 
                if not self.selectedItems() or 0==self.items.index(self.selectedItems()[0]):
                    self.items[0].setSelected(True)
                else:
                    cursel = self.items.index(self.selectedItems()[0])
                    self.items[cursel].setSelected(False)
                    self.items[cursel-1].setSelected(True)

            elif event.key() == QtCore.Qt.Key_Down: 
                if not self.selectedItems():
                    self.items[0].setSelected(True)
                elif len(self.items)-1==self.items.index(self.selectedItems()[0]):
                    pass
                else:
                    cursel = self.items.index(self.selectedItems()[0])
                    self.items[cursel].setSelected(False)
                    self.items[cursel+1].setSelected(True)

            #TODO ensure_visible prev_dir but it has to be searched by label
            elif event.key() == QtCore.Qt.Key_Left: 
                self.prev_dir = self.cwd
                self.changeDir('..')
            elif event.key() == QtCore.Qt.Key_Right: 
                if not self.selectedItems()[0].is_file:
                    self.prev_dir = self.selectedItems()[0].label.text()
                    self.changeDir(self.selectedItems()[0].label.text())
            elif event.key() == QtCore.Qt.Key_Return:
                if not self.selectedItems()[0].is_file:
                    self.changeDir(self.selectedItems()[0].label.text())
                else:
                    self.selectedItems()[0].playSample()
                    #play(self.selectedItems()[0].label.text())
            elif event.key() == QtCore.Qt.Key_Space:
                if self.selectedItems()[0].is_file:
                    self.selectedItems()[0].playSample()

    def clean(self):
        #self.clear()
        if self.items:
            for item in self.items:
                self.removeItem(item)

    def changeDir(self, path):
        self.clean()
        os.chdir(path)
        self.cwd = path
        self.cwd_folders, self.cwd_files = self.getContents()
        self.drawContents()
        self.path_updated.emit(os.getcwd())

    def drawContents(self):
        view = self.views()
        c = 0
        self.items = []
        for entry in self.cwd_folders:
            entry_rect = listItem(entry, False)
            entry_rect.setPos(0, line_height+c*line_height)
            self.addItem(entry_rect)
            self.items.append(entry_rect)
            if self.prev_dir:
                if entry==self.prev_dir:
                    view[0].ensureVisible(entry_rect, xMargin=-50)
                    entry_rect.setSelected(True)
            c += 1
        for entry in self.cwd_files:
            entry_rect = listItem(entry, True)
            entry_rect.setPos(0, line_height+c*line_height)
            self.addItem(entry_rect)
            self.items.append(entry_rect)
            c += 1

        if view:
            rect = self.itemsBoundingRect() 
            view[0].setSceneRect(rect)


    def isAudio(self, a_file):
        if os.path.splitext(a_file)[1].lower()[1:] in exts:
            return True
        return False

    def getContents(self):
        entries = os.listdir(os.getcwd())
        entries = [i for i in entries if not i.startswith('.')]
        dir_list = ['..']
        file_list = []
        for entry in entries:
            if os.path.isdir(entry):
                dir_list.append(entry)
            elif os.path.isfile(entry):
                if self.isAudio(entry):
                    file_list.append(entry)
        dir_list.sort(key=str.lower)
        file_list.sort(key=str.lower)

        return dir_list, file_list

class fileBrowser(QtGui.QGraphicsView):
    '''the file browser'''

    tab_pressed = QtCore.pyqtSignal()
    slash_pressed = QtCore.pyqtSignal()

    def __init__(self, path=os.path.expanduser("~")):
        QtGui.QGraphicsView.__init__(self)
        self.scene = fileList(path, self)
        self.setScene(self.scene)
        #self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

    def paint(self, painter, option, widget=None):
        QtGui.QGraphicsView.paint(self,painter,paint_option,widget)
        self.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

    def event(self, event):
        if event.type()==QtCore.QEvent.KeyPress:
                if event.key() == QtCore.Qt.Key_Tab:
                    self.tab_pressed.emit()
                    return True
                elif event.key() == QtCore.Qt.Key_Slash:
                    self.slash_pressed.emit()
                    return True
        return QtGui.QGraphicsView.event(self, event)

class pathLister(QtGui.QComboBox):
    path_updated = QtCore.pyqtSignal(str)
    tab_pressed = QtCore.pyqtSignal()
    esc_pressed = QtCore.pyqtSignal()
    
    def __init__(self):
       QtGui.QLineEdit.__init__(self)
       self.setEditable(True)

    def event(self, event):
        if event.type()==QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Tab:
                self.tab_pressed.emit()
                return True
            elif event.key() == QtCore.Qt.Key_Escape:
                self.setEditText(self.prev_text)
                self.esc_pressed.emit()
                return True
        return QtGui.QComboBox.event(self, event)

    def keyPressEvent(self, event):
        QtGui.QComboBox.keyPressEvent(self, event)
        if event.key() == QtCore.Qt.Key_Return:
            print 'looking up', self.currentText()
            if os.path.isdir(self.currentText()):
                self.path_updated.emit(self.currentText())

    def focusInEvent(self, event):
        self.prev_text = self.currentText()
        QtGui.QComboBox.focusInEvent(self, event)    

class mainWindow(QtGui.QTabWidget):

    def __init__(self):
        QtGui.QTabWidget.__init__(self) 
        #self.setAttribute(QtCore.Qt.WA_AcceptTouchEvents)
        #self.setStyleSheet("background-color: rgb(100,100,100); margin:0px; padding: 0px; border: 1px solid rgb(30,30,30); color: rgb(200,200,200);")
        self.setWindowFlags(QtCore.Qt.Dialog)
        self.setMinimumHeight(1000)

        self.tab1 = QtGui.QWidget()       
        self.filePath = pathLister()
        self.filePath.setFrame(QtGui.QFrame.NoFrame)
        self.files = fileBrowser(default_audio_dir)
        self.files.setFrameShape(QtGui.QFrame.NoFrame)

        self.playCheck = QtGui.QCheckBox()
        self.waveRect = QtGui.QWidget()
        #hBox = QtGui.QHBoxLayout()
        #hBox.addWidget(self.playCheck)
        #hBox.addWidget(self.waveRect)

        tab1Layout = QtGui.QVBoxLayout()
        tab1Layout.setSpacing(0)
        tab1Layout.setMargin(0)
        tab1Layout.setContentsMargins(0,0,0,0)
        tab1Layout.addWidget(self.filePath)
        tab1Layout.addWidget(self.files)
        #tab1Layout.addLayout(hBox)
        self.tab1.setLayout(tab1Layout)   

        self.tab2 = QtGui.QWidget()
        self.pluginSearch = QtGui.QLineEdit()
        self.pluginSearch.setText('search...')
        self.files1 = fileBrowser(default_audio_dir)
        self.files1.setFrameShape(QtGui.QFrame.NoFrame)

        tab2Layout = QtGui.QVBoxLayout()
        tab2Layout.setSpacing(0)
        tab2Layout.setMargin(0)
        tab2Layout.setContentsMargins(0,0,0,0)
        tab2Layout.addWidget(self.files1)
        self.tab2.setLayout(tab2Layout)
        
        self.addTab(self.tab1,"browser")
        self.addTab(self.tab2,"plugins")
        self.setTabPosition(QtGui.QTabWidget.West)
        self.setTabIcon(0,QtGui.QIcon.fromTheme("edit-undo"))
        self.setIconSize(QtCore.QSize(35,35))
        
        self.setWindowTitle('Surplus')
        self.files.setFocus()

        #connections
        self.files.tab_pressed.connect(self.switchTabs)
        self.files.slash_pressed.connect(self.focusPath)
        self.filePath.tab_pressed.connect(self.switchTabs)
        self.filePath.esc_pressed.connect(self.focusList)
        self.files1.tab_pressed.connect(self.switchTabs)
        self.files1.slash_pressed.connect(self.focusPath)

        self.files.scene.path_updated.connect(self.updatePath)
        self.filePath.path_updated.connect(self.updateList)
        self.files.scene.path_updated.emit(default_audio_dir)

    def switchTabs(self):
        self.setCurrentIndex((self.currentIndex()+1) % self.count() )

    def focusList(self):
        self.currentWidget().focusNextChild()

    def focusPath(self):
        self.currentWidget().focusPreviousChild()

    def updatePath(self, text):
        self.filePath.setEditText(text)

    def updateList(self, text):
        self.files.scene.changeDir(text)


    #def touchEvent(self, event):
    #    if event == QtGui.QTouchEvent.TouchScreen:
    #        print 'ok'

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    with open(style_file, 'r') as content_file:
        content = content_file.read()
    stylesheet = QtCore.QLatin1String(content)
    app.setStyleSheet(stylesheet)
   
    tabs = mainWindow()

    tabs.show()
    sys.exit(app.exec_())
    subprocess.call(['pkill','play'])
